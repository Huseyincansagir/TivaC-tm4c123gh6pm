#include<stdint.h>
#include<stdbool.h>
#include"inc/hw_types.h"
#include"inc/hw_memmap.h"
#include"inc/hw_ints.h"
#include"driverlib/sysctl.h"
#include"driverlib/gpio.h"
#include"inc/hw_gpio.h"
#include"driverlib/sysctl.c"
#include"driverlib/timer.c"
#include"driverlib/timer.h"
#include"driverlib/interrupt.h"
#include"inc/tm4c123gh6pm.h"
#include "lcd.h"
#include "stdio.h"
#include "string.h"
#include"driverlib/ADC.h"
#include "strings.h"
#include <stdlib.h>
#include "driverlib/uart.h"
#include "driverlib/pin_map.h"
//saatlerin int halleri
volatile int sn;
volatile int dk;
volatile int sa;
//saatlerin char halleri
volatile char saat[2];
volatile char dakika[2];
volatile char saniye[2];
volatile bool saatbasla=false;
void timerkesme();
void saatkac(void);

void uartyaz(char veri[],char ibare)


{

  UARTCharPut(UART0_BASE,ibare);
  int ebat=strlen(veri);
  int i=0;
     while (i!=ebat)
       {
        UARTCharPut(UART0_BASE,veri[i]);
        i++;
       }

   // UARTCharPut(UART0_BASE,ibare);
}





void timerkesme()
 {


     if(saatbasla)saatkac(); // saniyeyi 1 artırıp dakika ve saati düzenler. ve ekrana yazdırır.

     TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

 }

void adckesme()
{
       uint32_t gelendata[4];
       ADCSequenceDataGet(ADC0_BASE, 1, gelendata);
       uint32_t ortalamadeger=(gelendata[0]+gelendata[1]+gelendata[2]+gelendata[3])/4;
       char ADC[4];
       sprintf(ADC,"%04d",ortalamadeger);
       lcdgotoxy(12, 1);
       lcdyaziyaz(ADC);


     // UARTCharPut(UART0_BASE,0x0A);
       uartyaz(ADC,'#');

     // UARTCharPut(UART0_BASE,0x0D);
       ADCIntClear(ADC0_BASE, 1);
}

void serikesme(){

   unsigned long status;
   status=UARTIntStatus(UART0_BASE,true);
   UARTIntClear(UART0_BASE,status);



  while(UARTCharsAvail(UART0_BASE))
  {

        int veri=UARTCharGet(UART0_BASE);
        int i=0;


        if(veri==43)
        {
         int saatdegerler[8];
           for(i=0;i<8;i++)
              {
                veri=UARTCharGet(UART0_BASE);
              //  if((veri==37)||(veri==42))break;
               // if( !(UARTCharsAvail(UART0_BASE)))break;
                 saatdegerler[i]=veri;
              }

            int sn1 =  saatdegerler[7]-'0';
            int sn2 =  saatdegerler[6]-'0';
            int dk1 =  saatdegerler[4]-'0';
            int dk2 =  saatdegerler[3]-'0';
            int sa1 =  saatdegerler[1]-'0';
            int sa2 =  saatdegerler[0]-'0';
            sa=sa2*10+sa1;
            sn=sn2*10+sn1;
            dk=dk2*10+dk1;
            saatbasla=true;
         }



        if(veri==37)
       {
          for(i=1;i<16;i++)
           {
            int veri=UARTCharGet(UART0_BASE);
            if((veri==43)||(veri==37)||(veri==42))break;
            if( !(UARTCharsAvail(UART0_BASE)))break;
              lcdgotoxy(i, 2);
              lcdyaz(veri);
            }

         }



        if(veri==42)
        {

            for(i=1;i<16;i++)
                      {


                         lcdgotoxy(i, 2);
                         lcdyaz(' ');
                       }


        }




        if(veri=='!')
        {

          LcdTemizle();


        }






        UARTIntClear(UART0_BASE, UART_INT_RX);
        UARTIntClear(UART0_BASE, UART_INT_TX);
  }


}

void ayarlar()
{

           SysCtlClockSet(SYSCTL_SYSDIV_4|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN); //Osilatör ayarı 50MHz

            //---------------------------------------------
           SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
           SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
           SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);                                       //ADC0 aktif
           SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
           SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
           SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
           //---------------------------------------------
           HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;

           HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
           //----------------------------------------------
           GPIOPinTypeGPIOInput(GPIO_PORTF_BASE,GPIO_PIN_0|GPIO_PIN_4); // pf4 input
           GPIOPinTypeADC(GPIO_PORTE_BASE,GPIO_PIN_3);
           TimerConfigure(TIMER0_BASE, TIMER_CFG_A_PERIODIC);
           TimerLoadSet(TIMER0_BASE, TIMER_A, SysCtlClockGet());
           GPIOPinConfigure(GPIO_PA0_U0RX);
           GPIOPinConfigure(GPIO_PA1_U0TX);
           GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0|GPIO_PIN_1);
           //---------------------------------------------
           GPIOPadConfigSet(GPIO_PORTF_BASE,GPIO_PIN_0|GPIO_PIN_4, GPIO_STRENGTH_4MA, GPIO_PIN_TYPE_STD_WPU);// pull up için

           ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_TIMER, 0);
        //   ADCReferenceSet(ADC0_BASE, ADC_REF_EXT_5V);
           ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_CH0); //PortE 3 pini CH3
           ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ADC_CTL_CH0);
           ADCSequenceStepConfigure(ADC0_BASE, 1, 2, ADC_CTL_CH0);
           ADCSequenceStepConfigure(ADC0_BASE, 1, 3, ADC_CTL_CH0|ADC_CTL_END|ADC_CTL_IE);
           ADCSequenceEnable(ADC0_BASE, 1);
           UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 9600,UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE);

           //---------------------------------------------
           IntMasterEnable();
           IntEnable(INT_TIMER0A);
           IntEnable(INT_ADC0SS1);
           UARTEnable(UART0_BASE);
           IntEnable(INT_UART0);

           TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
           TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
           TimerIntRegister(TIMER0_BASE, TIMER_A, timerkesme);

           UARTIntEnable(UART0_BASE, UART_INT_RX);
           ADCIntEnable(ADC0_BASE, 1);
           ADCIntClear(ADC0_BASE, 1);
           ADCIntRegister(ADC0_BASE, 1, adckesme);
           UARTIntRegister(UART0_BASE, serikesme);

           TimerEnable(TIMER0_BASE, TIMER_A);
           TimerControlTrigger(TIMER0_BASE, TIMER_A, true);



}

void saatkac(void)

 {




     sn++;
         if(sn==60)
         {
             sn=0;
             dk++;
            if(dk==60)
               {
                 dk=0;
                 sa++;
                 if(sa==24)sa=0;
               }
         }


//int to char
     sprintf(saat,"%02d",sa);
     sprintf(dakika,"%02d",dk);
     sprintf(saniye,"%02d",sn);
//yazdırma
     lcdgotoxy(1, 1);
     lcdyaziyaz(saat);
     lcdgotoxy(3, 1);
     lcdyaz(':');
     lcdgotoxy(4, 1);
     lcdyaziyaz(dakika);
     lcdgotoxy(6, 1);
     lcdyaz(':');
     lcdgotoxy(7, 1);
     lcdyaziyaz(saniye);

 }

int main(void)
{
    lcdilkayarlar();
    ayarlar();
    while(1)
    {
        while((GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00))
        {
            if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x01)
              {

                uartyaz("Merhaba",'?');

              }
        }

     }



}
